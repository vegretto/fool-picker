{"version":3,"sources":["PlayersQty/PlayersQty.jsx","TableModal/TableModal.jsx","RolesTable/RolesTable.jsx","RolesTableWrapper/RolesTableWrapper.jsx","App.js","index.js"],"names":["PlayersQty","props","onChange","e","updatePlayers","target","playerId","checked","playersCheckboxes","players","map","player","index","span","className","id","value","label","Title","gutter","align","justify","type","size","onClick","setPlayersQtyVisible","TableModal","dispatch","useContext","ModalDispatch","handleOk","title","modal","roleName","visible","isModalVisible","onOk","onCancel","footer","roleRules","RolesTable","useState","tableData","setTableData","handleOpenModal","roleId","dataset","columns","dataIndex","key","render","text","record","style","color","background","bgColor","children","dataRole","useEffect","length","data","forEach","randomRole","roles","getRandomInt","newDataEntity","role","name","cardNum","resNum","push","pagination","dataSource","React","createContext","modalInitialState","modalReducer","state","action","Error","RolesTableWrapper","useReducer","firstMover","setFirstMover","checkedPlayers","filter","chooseFirstMover","min","max","Math","ceil","floor","random","Provider","xs","lg","App","playersQtyIsVisible","setPlayers","playersCopy","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1538cca2.chunk.js","sourcesContent":["import {Button, Checkbox, Row, Col} from \"antd\";\r\nimport './PlayersQty.css'\r\nimport Title from \"antd/es/typography/Title\";\r\n\r\nconst PlayersQty = (props) => {\r\n\r\n    const btnOnClick = () => {\r\n        props.setPlayersQtyVisible(false);\r\n    }\r\n    const onChange = (e) => {\r\n        props.updatePlayers(e.target.playerId, e.target.checked);\r\n    }\r\n\r\n    const playersCheckboxes = props.players.map((player, index) => {\r\n        return (\r\n            <Col key={index} span={12}>\r\n                <Checkbox className=\"custom-checkbox\" playerId={player.id} checked={player.checked} value={player.value} onChange={onChange}>{player.label}</Checkbox>\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container container--qty\">\r\n            <div className={\"players-qty\"}>\r\n                <div className=\"players-qty__inner\">\r\n                    <Title>Игроки</Title>\r\n                        <Row gutter={[16, 16]} align={'middle'} justify={'center'}>\r\n                            {playersCheckboxes}\r\n                        </Row>\r\n                    <br />\r\n                    <Button type=\"primary\" size=\"large\" onClick={btnOnClick}>GO</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayersQty;","import {Button, Modal} from \"antd\";\r\nimport {useContext} from \"react\";\r\nimport {ModalDispatch} from \"../RolesTableWrapper/RolesTableWrapper\";\r\n\r\nconst TableModal = (props) => {\r\n\r\n    const dispatch = useContext(ModalDispatch);\r\n\r\n    const handleOk = () => {\r\n        dispatch({ type: 'CLOSE-MODAL' });\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        dispatch({ type: 'CLOSE-MODAL' });\r\n    };\r\n\r\n    return (\r\n        <Modal title={props.modal.roleName} visible={props.modal.isModalVisible} onOk={handleOk} onCancel={handleCancel} footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n                OK\r\n            </Button>,\r\n        ]}>\r\n            <p>{props.modal.roleRules}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TableModal;","import {Table} from \"antd\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport \"./RolesTable.css\";\r\nimport {ModalDispatch} from \"../RolesTableWrapper/RolesTableWrapper\";\r\n\r\nconst RolesTable = (props) => {\r\n    const [tableData, setTableData] = useState([])\r\n    const dispatch = useContext(ModalDispatch);\r\n\r\n    const handleOpenModal = (e) => {\r\n        dispatch({ type: 'OPEN-MODAL', roleId: e.target.dataset.id });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Игрок',\r\n            dataIndex: 'player',\r\n            key: 'player',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            color: record.color,\r\n                            background: record.bgColor\r\n                        },\r\n                    },\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Роль',\r\n            dataIndex: 'role',\r\n            key: 'role',\r\n            render: (text, record) => {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            color: record.color,\r\n                            background: record.bgColor\r\n                        },\r\n                    },\r\n                    children: <span className='roleLink' data-id={record.dataRole}\r\n                                    onClick={handleOpenModal}>{text}</span>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Количество карт',\r\n            dataIndex: 'cardNum',\r\n            key: 'cardNum',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            color: record.color,\r\n                            background: record.bgColor\r\n                        },\r\n                    },\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Кол-во возвращений в игру',\r\n            dataIndex: 'resNum',\r\n            key: 'resNum',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            color: record.color,\r\n                            background: record.bgColor\r\n                        },\r\n                    },\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            let data = [];\r\n            props.players.forEach((player) => {\r\n\r\n                if (player.checked) {\r\n                    let randomRole = props.roles[props.getRandomInt(0, props.roles.length)];\r\n                    let newDataEntity = {\r\n                        key: player.id,\r\n                        player: player.label,\r\n                        role: randomRole.name,\r\n                        dataRole: randomRole.id,\r\n                        color: randomRole.color,\r\n                        bgColor: randomRole.bgColor,\r\n                        cardNum: randomRole.id === 0 ? 9 : props.getRandomInt(5, 8),\r\n                        resNum: randomRole.id === 0 ? 0 : props.getRandomInt(1, 3),\r\n                    }\r\n\r\n                    data.push(newDataEntity);\r\n                }\r\n            })\r\n            setTableData(data)\r\n        }\r\n    }, [props, tableData.length])\r\n\r\n    return (\r\n        <Table pagination={false} columns={columns} dataSource={tableData}/>\r\n    )\r\n}\r\n\r\nexport default RolesTable;","import {Button, Col, Row} from \"antd\";\r\nimport TableModal from \"../TableModal/TableModal\";\r\nimport RolesTable from \"../RolesTable/RolesTable\";\r\nimport React, {useEffect, useReducer, useState} from \"react\";\r\n\r\nexport const ModalDispatch = React.createContext(null);\r\n\r\nconst roles = [\r\n    {\r\n        id: 0,\r\n        name: 'Варвар',\r\n        color: '#000',\r\n        bgColor: '#afafaf',\r\n        roleRules: 'Отбивается 1 раз за игру, нельзя вернуть в игру'\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'Танк',\r\n        color: '#000',\r\n        bgColor: '#51885d',\r\n        roleRules: 'Может отбить одной картой две'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Некромант',\r\n        color: '#fff',\r\n        bgColor: '#212121',\r\n        roleRules: 'Воскрешает 2 карты из отбоя в руку сопернику 3 раза за игру'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Ядовитый',\r\n        color: '#000',\r\n        bgColor: '#00ff1f',\r\n        roleRules: 'Делает укол с ядом 2 раза за игру'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Дамагер',\r\n        color: '#000',\r\n        bgColor: '#ff5151',\r\n        roleRules: 'Может подкидывать +- 1 карту по номиналу'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Плут',\r\n        color: '#000',\r\n        bgColor: '#f8ff8d',\r\n        roleRules: 'Два козыря'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Отражатель',\r\n        color: '#000',\r\n        bgColor: '#ce8e00',\r\n        roleRules: 'Отражает карту 2 раза за игру'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Реверсивный',\r\n        color: '#000',\r\n        bgColor: '#b912ff',\r\n        roleRules: 'Бьет большие карты меньшими, может 1 раз вернуть себе 2 свои карты из отбоя'\r\n    }\r\n];\r\n\r\nlet modalInitialState = {\r\n    isModalVisible: false,\r\n    roleRules: '...',\r\n    roleName: '...'\r\n}\r\n\r\n\r\nconst modalReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'OPEN-MODAL':\r\n            return {\r\n                ...state,\r\n                isModalVisible: true,\r\n                roleName: roles[action.roleId].name,\r\n                roleRules: roles[action.roleId].roleRules\r\n            };\r\n        case 'CLOSE-MODAL':\r\n            return {\r\n                ...state,\r\n                isModalVisible: false,\r\n            };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nconst RolesTableWrapper = (props) => {\r\n    const [modal, dispatch] = useReducer(modalReducer, modalInitialState);\r\n\r\n    const [firstMover, setFirstMover] = useState('...')\r\n\r\n\r\n    useEffect(() => {\r\n        if (firstMover === '...' && props.players.length > 0) {\r\n            const chooseFirstMover = () => {\r\n                const checkedPlayers = props.players.filter((player) => {\r\n                    return(player.checked)\r\n                })\r\n                if (checkedPlayers.length > 0) {\r\n                    const randomPlayer = checkedPlayers[getRandomInt(0, checkedPlayers.length)];\r\n                    return (\r\n                        randomPlayer.label\r\n                    )\r\n                }\r\n                return \"никто. Недостаточно игроков\"\r\n            }\r\n            setFirstMover(chooseFirstMover());\r\n        }\r\n    }, [firstMover, props.players])\r\n\r\n\r\n    const getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    const btnOnClick = () => {\r\n        props.setPlayersQtyVisible(true);\r\n    }\r\n\r\n    return (\r\n        <ModalDispatch.Provider value={dispatch}>\r\n            <div className=\"container container--main\">\r\n                <Row justify=\"center\">\r\n                    <Col xs={24} lg={12} align=\"center\">\r\n                        <RolesTable roles={roles} players={props.players} getRandomInt={getRandomInt}/>\r\n                        <br />\r\n                        <div>Ходит { firstMover }</div>\r\n                        <br />\r\n                        <Button type=\"primary\" size=\"large\" onClick={btnOnClick}>Новая партия</Button>\r\n                    </Col>\r\n                </Row>\r\n                    <TableModal modal={modal} />\r\n            </div>\r\n        </ModalDispatch.Provider>\r\n    )\r\n}\r\n\r\nexport default RolesTableWrapper;","//TODO Добавить добавление кастомного игрока\n\nimport './App.css';\nimport PlayersQty from \"./PlayersQty/PlayersQty\";\nimport RolesTableWrapper from \"./RolesTableWrapper/RolesTableWrapper\";\nimport {useState} from \"react\";\n\n\nfunction App() {\n    const [playersQtyIsVisible, setPlayersQtyVisible] = useState(true);\n\n    const [players, setPlayers] = useState([\n        { id: 0, label: 'Денис', value: 'Денис', checked: true},\n        { id: 1, label: 'Сергей 1', value: 'Сергей 1', checked: true},\n        { id: 2, label: 'Анна', value: 'Анна', checked: true},\n        { id: 3, label: 'Сергей 2', value: 'Сергей 2', checked: true},\n        ]\n    );\n\n    const updatePlayers = (id, checked) => {\n        const playersCopy = [...players]\n        playersCopy[id].checked = checked\n        setPlayers(playersCopy);\n    }\n\n    return (\n          <main>\n              {playersQtyIsVisible ?\n                  <PlayersQty setPlayersQtyVisible={setPlayersQtyVisible} players={players} updatePlayers={updatePlayers}/> :\n                  <RolesTableWrapper setPlayersQtyVisible={setPlayersQtyVisible} players={players}/>\n              }\n          </main>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}