{"version":3,"sources":["PlayersQty/PlayersQty.jsx","TableModal/TableModal.jsx","RolesTable/RolesTable.jsx","RolesTableWrapper/RolesTableWrapper.jsx","App.js","store/store.js","index.js"],"names":["PlayersQty","props","onChange","e","updatePlayers","target","playerId","checked","playersCheckboxes","players","map","player","index","span","className","id","value","label","Title","gutter","align","justify","gameModes","isOn","name","setGameMode","type","size","onClick","setPlayersSelectorVisible","TableModal","dispatch","useDispatch","handleOk","title","modal","visible","isVisible","onOk","onCancel","footer","description","RolesTable","useState","tableData","setTableData","handleOpenModal","roleId","dataset","columns","dataIndex","key","render","text","record","style","background","bgColor","children","icons","icon","alt","src","process","roles","role","dataRole","useEffect","length","data","forEach","roleQty","randomRole","firstRandomRole","bgColors","i","getRandomInt","push","color","newDataEntity","cardNum","resNum","pagination","dataSource","RolesTableWrapper","useSelector","state","firstMover","setFirstMover","checkedPlayers","filter","chooseFirstMover","min","max","Math","ceil","floor","random","xs","lg","App","isPlayersSelectorVisible","playersSelector","gameMode","initialState","roleRules","store","createStore","action","mode","clickedRole","isModalVisible","document","getState","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.92fdb230.chunk.js","sourcesContent":["import {Button, Checkbox, Row, Col} from \"antd\";\r\nimport './PlayersQty.css'\r\nimport Title from \"antd/es/typography/Title\";\r\n\r\nconst PlayersQty = (props) => {\r\n\r\n    const btnOnClick = () => {\r\n        props.setPlayersSelectorVisible(false);\r\n    }\r\n    const onChange = (e) => {\r\n        props.updatePlayers(e.target.playerId, e.target.checked);\r\n    }\r\n    const modesOnChange = (e) => {\r\n        props.setGameMode(e.target.value, e.target.checked)\r\n    }\r\n\r\n    const playersCheckboxes = props.players.map((player, index) => {\r\n        return (\r\n            <Col key={index} span={12}>\r\n                <Checkbox className=\"custom-checkbox\" playerId={player.id} checked={player.checked} value={player.value} onChange={onChange}>{player.label}</Checkbox>\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container container--qty\">\r\n            <div className={\"players-qty\"}>\r\n                <div className=\"players-qty__inner\">\r\n                    <Title>Игроки</Title>\r\n                        <Row gutter={[16, 16]} align={'middle'} justify={'center'}>\r\n                            {playersCheckboxes}\r\n                        </Row>\r\n                    <br />\r\n                    <div className=\"modes-wrapper\">\r\n                        <Checkbox className=\"custom-checkbox\" checked={props.gameModes[0].isOn} value={props.gameModes[0].name} onChange={modesOnChange}>Двойные роли</Checkbox>\r\n                        <Button type=\"primary\" size=\"large\" onClick={btnOnClick}>GO</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayersQty;","import {Button, Modal} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst TableModal = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOk = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    return (\r\n        <Modal title={props.modal.title} visible={props.modal.isVisible} onOk={handleOk} onCancel={handleCancel} footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n                OK\r\n            </Button>,\r\n        ]}>\r\n            <p>{props.modal.description}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TableModal;","import {Table} from \"antd\";\r\nimport {useEffect, useState} from \"react\";\r\nimport \"./RolesTable.css\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n\r\nconst RolesTable = (props) => {\r\n\r\n    const [tableData, setTableData] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOpenModal = (e) => {\r\n        dispatch({ type: 'openModal', roleId: e.target.dataset.id });\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: '',\r\n            dataIndex: 'color',\r\n            key: 'color',\r\n            className: 'ant-table-cell--color',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            background: `linear-gradient(135deg, ${record.bgColor[0]} 40%, ${record.bgColor[1]} 60%)`\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: '',\r\n            dataIndex: 'icon',\r\n            key: 'icon',\r\n            className: 'ant-table-cell--icon',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={\"roles-icons\"}>\r\n                            {record.icons.map(function (icon, index) {\r\n                                return (\r\n                                    <img key={index} className=\"role-icon\" alt=\"\" src={`${process.env.PUBLIC_URL}/img/${icon}`} />\r\n                                    )\r\n                            })}\r\n                        </div>\r\n                }\r\n            },\r\n        },\r\n        {\r\n            title: 'Игрок',\r\n            dataIndex: 'player',\r\n            key: 'player',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Роль',\r\n            dataIndex: 'roles',\r\n            key: 'roles',\r\n            render: (text, record) => {\r\n                return {\r\n                    children:\r\n                        <div className={'roles-list'}>\r\n                            {record.roles.map((role, index) => {\r\n                                return (\r\n                                    <>\r\n                                    <span key={index} className='roleLink' data-id={role.dataRole}\r\n                                          onClick={handleOpenModal}>{role.role}{index === 0 ? ',': ''}</span>\r\n                                    <space> </space>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Количество карт',\r\n            dataIndex: 'cardNum',\r\n            key: 'cardNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Возвращения',\r\n            dataIndex: 'resNum',\r\n            key: 'resNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            let data = [];\r\n            props.players.forEach((player) => {\r\n            let roleQty = 1;\r\n            if (props.gameModes[0].isOn === true) {\r\n                roleQty = 2;\r\n            }\r\n                if (player.checked) {\r\n                    let randomRole;\r\n                    let firstRandomRole;\r\n                    let roles = [];\r\n                    let bgColors = [];\r\n                    let icons = [];\r\n                    for (let i = 0; i < roleQty; i++) {\r\n                        randomRole = props.roles[props.getRandomInt(0, props.roles.length)];\r\n                        bgColors.push(randomRole.bgColor);\r\n                        icons.push(randomRole.icon)\r\n                        if (i === 0) {\r\n                            firstRandomRole = randomRole;\r\n                        }\r\n                        let role = {\r\n                            role: randomRole.name,\r\n                            dataRole: randomRole.id,\r\n                            color: randomRole.color,\r\n                        }\r\n                        roles.push(role);\r\n                    }\r\n                    const newDataEntity = {\r\n                        key: player.id,\r\n                        player: player.label,\r\n                        roles: roles,\r\n                        bgColor: bgColors,\r\n                        icons: icons,\r\n                        color: firstRandomRole.color,\r\n                        cardNum: (firstRandomRole.id === 0 || randomRole.id === 0) ? 9 : props.getRandomInt(5, 8),\r\n                        resNum: (firstRandomRole.id === 0 || randomRole.id === 0)  ? 0 : props.getRandomInt(1, 3),\r\n                    }\r\n\r\n                    data.push(newDataEntity);\r\n                }\r\n            })\r\n            setTableData(data)\r\n        }\r\n    }, [props, tableData.length])\r\n\r\n    return (\r\n        <Table pagination={false} columns={columns} dataSource={tableData}/>\r\n    )\r\n}\r\n\r\nexport default RolesTable;","import {Button, Col, Row} from \"antd\";\r\nimport TableModal from \"../TableModal/TableModal\";\r\nimport RolesTable from \"../RolesTable/RolesTable\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\n\r\nconst RolesTableWrapper = (props) => {\r\n\r\n\r\n    const roles = useSelector((state) => state.roles)\r\n    const modal = useSelector((state) => state.modal)\r\n\r\n    const [firstMover, setFirstMover] = useState('...')\r\n\r\n    useEffect(() => {\r\n        if (firstMover === '...') {\r\n            const chooseFirstMover = () => {\r\n                const checkedPlayers = props.players.filter((player) => {\r\n                    return(player.checked)\r\n                })\r\n                if (checkedPlayers.length > 0) {\r\n                    const randomPlayer = checkedPlayers[getRandomInt(0, checkedPlayers.length)];\r\n                    return (\r\n                        randomPlayer.label\r\n                    )\r\n                }\r\n                return \"никто. Недостаточно игроков\"\r\n            }\r\n            setFirstMover(chooseFirstMover());\r\n        }\r\n    }, [firstMover, props.players])\r\n\r\n\r\n    const getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    const btnOnClick = () => {\r\n        props.setPlayersSelectorVisible(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container container--main\">\r\n            <Row justify=\"center\">\r\n                <Col xs={24} lg={16} align=\"center\">\r\n                    <RolesTable roles={roles} players={props.players} getRandomInt={getRandomInt} gameModes={props.gameModes}/>\r\n                    <br />\r\n                    <div>Ходит { firstMover }</div>\r\n                    <br />\r\n                    <Button type=\"primary\" size=\"large\" onClick={btnOnClick}>Новая партия</Button>\r\n                </Col>\r\n            </Row>\r\n                <TableModal modal={modal} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RolesTableWrapper;","//TODO Добавить добавление кастомного игрока\n//TODO Добавить блэклист ролей\n\nimport './App.css';\nimport PlayersQty from \"./PlayersQty/PlayersQty\";\nimport RolesTableWrapper from \"./RolesTableWrapper/RolesTableWrapper\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nfunction App() {\n    const isPlayersSelectorVisible = useSelector((state) => state.playersSelector.isVisible)\n    const players = useSelector((state) => state.players)\n    const gameModes = useSelector((state) => state.gameModes)\n    const dispatch = useDispatch()\n\n    const updatePlayers = (id, checked) => {\n        dispatch({\n            type: 'updatePlayers',\n            id,\n            checked\n        })\n    }\n\n    const setPlayersSelectorVisible = (value) => {\n        dispatch({\n            type: 'setPlayersSelectorVisible',\n            value\n        })\n    }\n\n    const setGameMode = (gameMode, value) => {\n        dispatch({\n            type: 'setGameMode',\n            gameMode,\n            value\n        })\n    }\n    return (\n        <main>\n            {isPlayersSelectorVisible ?\n                <PlayersQty setPlayersSelectorVisible={setPlayersSelectorVisible} players={players}\n                            updatePlayers={updatePlayers} gameModes={gameModes} setGameMode={setGameMode}/> :\n                <RolesTableWrapper setPlayersSelectorVisible={setPlayersSelectorVisible} players={players} gameModes={gameModes}/>\n            }\n        </main>\n    );\n}\n\nexport default App;\n","import {createStore} from \"redux\";\r\n\r\nlet initialState = {\r\n    players: [\r\n        {id: 0, label: 'Денис', value: 'Денис', checked: true},\r\n        {id: 1, label: 'Сергей 1', value: 'Сергей 1', checked: true},\r\n        {id: 2, label: 'Анна', value: 'Анна', checked: true},\r\n        {id: 3, label: 'Сергей 2', value: 'Сергей 2', checked: true}\r\n    ],\r\n\r\n    playersSelector: {\r\n        isVisible: true\r\n    },\r\n\r\n    modal: {\r\n        isVisible: false,\r\n        title: '...',\r\n        description: '...'\r\n    },\r\n\r\n    gameModes: [\r\n        {\r\n            id: 0, name: 'doubleRoles', isOn: false,\r\n        },\r\n    ],\r\n\r\n    roles: [\r\n        {\r\n            id: 0,\r\n            name: 'Варвар',\r\n            color: '#000',\r\n            bgColor: '#afafaf',\r\n            roleRules: 'Отбивается 1 раз за игру, нельзя вернуть в игру',\r\n            icon: 'barbarian.svg',\r\n        },\r\n        {\r\n            id: 1,\r\n            name: 'Крестоносец',\r\n            color: '#000',\r\n            bgColor: '#51885d',\r\n            roleRules: 'Может отбить одной картой две',\r\n            icon: 'crusader.svg',\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Некромант',\r\n            color: '#fff',\r\n            bgColor: '#212121',\r\n            roleRules: 'Воскрешает половину от кол-ва своих карт в колоду противника 3 раза за игру',\r\n            icon: 'necromancer.svg',\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ядовитый',\r\n            color: '#000',\r\n            bgColor: '#00ff1f',\r\n            roleRules: 'Делает укол с ядом 2 раза за игру',\r\n            icon: 'poisonous.svg',\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Берсерк',\r\n            color: '#000',\r\n            bgColor: '#ff5151',\r\n            roleRules: 'Может подкидывать +- 1 карту по номиналу',\r\n            icon: 'berserk.svg',\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Разбойник',\r\n            color: '#000',\r\n            bgColor: '#f8ff8d',\r\n            roleRules: 'Два козыря',\r\n            icon: 'rogue.svg',\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Отражатель',\r\n            color: '#000',\r\n            bgColor: '#ce8e00',\r\n            roleRules: 'Отражает карту 2 раза за игру',\r\n            icon: 'deflector.svg',\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Реверсивный',\r\n            color: '#000',\r\n            bgColor: '#b912ff',\r\n            roleRules: 'Бьет большие карты меньшими',\r\n            icon: 'reverse.svg',\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Рыцарь',\r\n            color: '#fff',\r\n            bgColor: '#000f72',\r\n            roleRules: 'Подкидывает кому угодно, а ему может подкинуть только игрок справа',\r\n            icon: 'knight.svg',\r\n        },\r\n        {\r\n            id: 9,\r\n            name: 'Вор',\r\n            color: '#fff',\r\n            bgColor: '#555',\r\n            roleRules: '2 раза за игру смотрит карты оппонента и ворует любую одну из них',\r\n            icon: 'thief.svg',\r\n        }\r\n    ],\r\n}\r\n\r\nlet appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'setGameMode':\r\n            return {\r\n                ...state,\r\n                gameModes: [\r\n                    ...state.gameModes.map((mode) => {\r\n                        if (mode.name === action.gameMode) {\r\n                            mode.isOn = action.value\r\n                        }\r\n                        return {...mode}\r\n                    })\r\n                ]\r\n            }\r\n        case 'updatePlayers':\r\n\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players.map((player, index) => {\r\n                        if (index === action.id) {\r\n                            player.checked = action.checked\r\n                        }\r\n                        return {...player}\r\n                    })\r\n                ],\r\n            }\r\n        case 'setPlayersSelectorVisible':\r\n            return {\r\n                ...state,\r\n                playersSelector: {\r\n                    isVisible: action.value\r\n                }\r\n            }\r\n        case 'openModal':\r\n            let clickedRole = initialState.roles[action.roleId]\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isVisible: true,\r\n                    title: clickedRole.name,\r\n                    description: clickedRole.roleRules\r\n                }\r\n            };\r\n        case 'closeModal':\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isModalVisible: false,\r\n                }\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet store = createStore(appReducer);\r\ndocument.state = store.getState();\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}