{"version":3,"sources":["GameSettingsPage/GameSettingsPage.jsx","App.js","helpers.js","store/store.js","index.js"],"names":["GameSettingsPage","props","useState","newPlayerName","setNewPlayerName","navigate","useNavigate","onChange","e","updatePlayers","target","playerId","checked","playersCheckboxes","players","map","player","index","span","className","id","value","label","Title","gutter","align","justify","gameModes","isOn","name","setGameMode","placeholder","onClick","addCustomPlayer","type","size","replace","RolesTableWrapper","React","lazy","BlackList","App","useSelector","state","dispatch","useDispatch","setPlayersSelectorVisible","gameMode","path","element","fallback","checkArrayAvailableQty","array","minLength","filterProp","filterValue","filter","item","length","initialState","playersSelector","isVisible","modal","title","description","roles","color","bgColor","roleRules","icon","isBanned","store","createStore","action","mode","clickedRole","roleId","isModalVisible","isValid","role","document","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2edc2b55.chunk.js","sourcesContent":["import {Button, Checkbox, Row, Col, Input} from \"antd\";\r\nimport './GameSettingsPage.css'\r\nimport Title from \"antd/es/typography/Title\";\r\nimport {useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst GameSettingsPage = (props) => {\r\n\r\n    const [newPlayerName, setNewPlayerName] = useState(\"\");\r\n    let navigate = useNavigate();\r\n\r\n    const onGoClick = () => {\r\n        navigate(\"../fool-picker/game\", { replace: true });\r\n    }\r\n    const onChange = (e) => {\r\n        props.updatePlayers(e.target.playerId, e.target.checked);\r\n    }\r\n    const modesOnChange = (e) => {\r\n        props.setGameMode(e.target.value, e.target.checked);\r\n    }\r\n\r\n    const addCustomPlayer = () => {\r\n        props.addCustomPlayer(newPlayerName)\r\n    }\r\n\r\n    const onBanClick = () => {\r\n        navigate(\"../fool-picker/blacklist\", { replace: true });\r\n    }\r\n\r\n\r\n    const playersCheckboxes = props.players.map((player, index) => {\r\n        return (\r\n            <Col key={index} span={12}>\r\n                <Checkbox className=\"custom-checkbox\" playerId={player.id} checked={player.checked} value={player.value} onChange={onChange}>{player.label}</Checkbox>\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container container--qty\">\r\n            <div className={\"players-qty\"}>\r\n                <div className=\"players-qty__inner\">\r\n                    <Title>Игроки</Title>\r\n                        <Row gutter={[16, 16]} align={'middle'} justify={'center'}>\r\n                            {playersCheckboxes}\r\n                        </Row>\r\n                    <br />\r\n                    <div className={\"options-subtitle\"}>Режимы игры</div>\r\n                    <div className=\"modes-wrapper\">\r\n                        <Checkbox className=\"custom-checkbox\" checked={props.gameModes[0].isOn} value={props.gameModes[0].name} onChange={modesOnChange}>Двойные роли</Checkbox>\r\n                    </div>\r\n                    <div className={\"options-subtitle\"}>Добавить игроков</div>\r\n                    <div className={\"new-players-box\"}>\r\n                        <div className={\"field-group\"}>\r\n                            <Input placeholder=\"Имя\" value={newPlayerName} onChange={e => setNewPlayerName(e.target.value)}/>\r\n                            <Button onClick={addCustomPlayer}>Добавить</Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className={\"common-box\"}>\r\n                        <div className={\"options-subtitle\"}>Бан ролей</div>\r\n                        <Button type=\"primary\" size=\"large\" onClick={onBanClick}>Выбрать роли для бана</Button>\r\n                    </div>\r\n                    <Button type=\"primary\" size=\"large\" onClick={onGoClick}>GO</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameSettingsPage;","import React, { Suspense } from \"react\";\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    BrowserRouter as Router,\n    Route, Routes\n} from \"react-router-dom\";\nimport GameSettingsPage from \"./GameSettingsPage/GameSettingsPage\";\n\nconst RolesTableWrapper = React.lazy(() => import('./RolesTableWrapper/RolesTableWrapper'));\nconst BlackList = React.lazy(() => import('./BlackList/BlackList'));\n\n\nfunction App() {\n    const players = useSelector((state) => state.players)\n    const gameModes = useSelector((state) => state.gameModes)\n    const dispatch = useDispatch()\n\n    const updatePlayers = (id, checked) => {\n        dispatch({\n            type: 'updatePlayers',\n            id,\n            checked\n        })\n    }\n\n    const setPlayersSelectorVisible = (value) => {\n        dispatch({\n            type: 'setPlayersSelectorVisible',\n            value\n        })\n    }\n\n    const setGameMode = (gameMode, value) => {\n        dispatch({\n            type: 'setGameMode',\n            gameMode,\n            value\n        })\n    }\n\n    const addCustomPlayer = (name) => {\n        dispatch({\n            type: 'addCustomPlayer',\n            name\n        })\n    }\n    return (\n        <Router>\n            <Routes>\n                {['/', '/fool-picker']\n                    .map((path,index) => {\n                        return <Route key={index} path={path} element={\n\n                                <GameSettingsPage setPlayersSelectorVisible={setPlayersSelectorVisible}\n                                                  players={players}\n                                                  updatePlayers={updatePlayers}\n                                                  gameModes={gameModes}\n                                                  setGameMode={setGameMode}\n                                                  addCustomPlayer={addCustomPlayer}/>\n\n                        }/>\n                    })\n                }\n                <Route path=\"/fool-picker/blacklist\" element={\n                    <Suspense fallback={<div>Загрузка...</div>}>\n                        <BlackList />\n                    </Suspense>\n                } />\n                <Route path=\"/fool-picker/game\" element={\n                    <Suspense fallback={<div>Загрузка...</div>}>\n                        <RolesTableWrapper\n                            setPlayersSelectorVisible={setPlayersSelectorVisible}\n                            players={players}\n                            gameModes={gameModes} />\n                    </Suspense>\n                } />\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;\n","\r\nexport const checkArrayAvailableQty = (array, minLength, filterProp, filterValue) => {\r\n    if (array.filter(item => item[filterProp] === filterValue).length > minLength) {\r\n        return true;\r\n    }\r\n    return false;\r\n}","import {createStore} from \"redux\";\r\nimport {checkArrayAvailableQty} from \"../helpers\";\r\n\r\nlet initialState = {\r\n    players: [\r\n        {id: 0, label: 'Денис', value: 'Денис', checked: true},\r\n        {id: 1, label: 'Сергей 1', value: 'Сергей 1', checked: true},\r\n        {id: 2, label: 'Анна', value: 'Анна', checked: true},\r\n        {id: 3, label: 'Сергей 2', value: 'Сергей 2', checked: true}\r\n    ],\r\n\r\n    playersSelector: {\r\n        isVisible: true\r\n    },\r\n\r\n    modal: {\r\n        isVisible: false,\r\n        title: '...',\r\n        description: '...'\r\n    },\r\n\r\n    gameModes: [\r\n        {\r\n            id: 0, name: 'doubleRoles', isOn: false,\r\n        },\r\n    ],\r\n\r\n    roles: [\r\n        {\r\n            id: 0,\r\n            name: 'Варвар',\r\n            color: '#000',\r\n            bgColor: '#afafaf',\r\n            roleRules: 'Отбивается 1 раз за игру, нельзя вернуть в игру',\r\n            icon: 'barbarian.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 1,\r\n            name: 'Крестоносец',\r\n            color: '#000',\r\n            bgColor: '#51885d',\r\n            roleRules: 'Может отбить одной картой две',\r\n            icon: 'crusader.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Некромант',\r\n            color: '#fff',\r\n            bgColor: '#212121',\r\n            roleRules: 'Воскрешает половину от кол-ва своих карт в колоду противника 3 раза за игру',\r\n            icon: 'necromancer.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ядовитый',\r\n            color: '#000',\r\n            bgColor: '#00ff1f',\r\n            roleRules: 'Делает укол с ядом 2 раза за игру',\r\n            icon: 'poisonous.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Берсерк',\r\n            color: '#000',\r\n            bgColor: '#ff5151',\r\n            roleRules: 'Может подкидывать +- 1 карту по номиналу',\r\n            icon: 'berserk.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Разбойник',\r\n            color: '#000',\r\n            bgColor: '#f8ff8d',\r\n            roleRules: 'Два козыря',\r\n            icon: 'rogue.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Отражатель',\r\n            color: '#000',\r\n            bgColor: '#ce8e00',\r\n            roleRules: 'Отражает карту 2 раза за игру',\r\n            icon: 'deflector.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Реверсивный',\r\n            color: '#000',\r\n            bgColor: '#b912ff',\r\n            roleRules: 'Бьет большие карты меньшими',\r\n            icon: 'reverse.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Рыцарь',\r\n            color: '#fff',\r\n            bgColor: '#000f72',\r\n            roleRules: 'Подкидывает кому угодно, а ему может подкинуть только игрок справа',\r\n            icon: 'knight.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 9,\r\n            name: 'Вор',\r\n            color: '#fff',\r\n            bgColor: '#555',\r\n            roleRules: '2 раза за игру смотрит 3 любые карты оппонента и ворует любую одну из них',\r\n            icon: 'thief.svg',\r\n            isBanned: false\r\n        }\r\n    ],\r\n}\r\n\r\nexport let appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'addCustomPlayer':\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players,\r\n                    {id: state.players.length, label: action.name ? action.name : \"Инкогнито\", value: action.name ? action.name : \"Инкогнито\", checked: true}\r\n                ]\r\n            }\r\n        case 'setGameMode':\r\n            return {\r\n                ...state,\r\n                gameModes: [\r\n                    ...state.gameModes.map((mode) => {\r\n                        if (mode.name === action.gameMode) {\r\n                            mode.isOn = action.value\r\n                        }\r\n                        return {...mode}\r\n                    })\r\n                ]\r\n            }\r\n        case 'updatePlayers':\r\n\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players.map((player, index) => {\r\n                        if (index === action.id) {\r\n                            player.checked = action.checked\r\n                        }\r\n                        return {...player}\r\n                    })\r\n                ],\r\n            }\r\n        case 'openModal':\r\n            let clickedRole = initialState.roles[action.roleId]\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isVisible: true,\r\n                    title: clickedRole.name,\r\n                    description: clickedRole.roleRules\r\n                }\r\n            };\r\n        case 'closeModal':\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isModalVisible: false,\r\n                }\r\n            };\r\n        case 'setRoleBan':\r\n            const isValid = (checkArrayAvailableQty(state.roles, 1, 'isBanned', false));\r\n            return {\r\n                ...state,\r\n                roles: [\r\n                    ...state.roles.map((role) => {\r\n                        if (role.id === action.id) {\r\n                            if (!role.isBanned) {\r\n                                if (isValid) {\r\n                                    role.isBanned = !role.isBanned\r\n                                }\r\n                            }\r\n                            else {\r\n                                role.isBanned = !role.isBanned\r\n                            }\r\n\r\n                        }\r\n                        return {...role}\r\n                    })\r\n                ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet store = createStore(appReducer);\r\ndocument.state = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}