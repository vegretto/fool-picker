{"version":3,"sources":["GameSettingsPage/GameSettingsPage.jsx","TableModal/TableModal.jsx","RolesTable/RolesTable.jsx","RolesTableWrapper/RolesTableWrapper.jsx","BlackListItem/BlackListItem.jsx","BlackList/BlackList.jsx","App.js","store/store.js","index.js"],"names":["GameSettingsPage","props","useState","newPlayerName","setNewPlayerName","navigate","useNavigate","onChange","e","updatePlayers","target","playerId","checked","playersCheckboxes","players","map","player","index","span","className","id","value","label","Title","gutter","align","justify","gameModes","isOn","name","setGameMode","placeholder","onClick","addCustomPlayer","type","size","replace","TableModal","dispatch","useDispatch","handleOk","title","modal","visible","isVisible","onOk","onCancel","footer","description","RolesTable","tableData","setTableData","handleOpenModal","roleId","dataset","columns","dataIndex","key","render","text","record","style","backgroundColor","bgColor","background","children","icons","icon","alt","src","process","roles","role","dataRole","length","diesNums","num","useEffect","data","forEach","roleQty","randomRole","firstRandomRole","bgColors","notBannedRoles","filter","isBanned","i","getRandomInt","push","color","diesNum","newDataEntity","cardNum","resNum","pagination","dataSource","RolesTableWrapper","useSelector","state","firstMover","setFirstMover","checkedPlayers","chooseFirstMover","min","max","Math","ceil","floor","random","BlackListItem","toggleRoleBan","BlackList","rolesMarkUp","App","setPlayersSelectorVisible","gameMode","path","element","initialState","playersSelector","roleRules","store","createStore","action","mode","clickedRole","isModalVisible","document","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.98d8cdee.chunk.js","sourcesContent":["import {Button, Checkbox, Row, Col, Input} from \"antd\";\r\nimport './GameSettingsPage.css'\r\nimport Title from \"antd/es/typography/Title\";\r\nimport {useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst GameSettingsPage = (props) => {\r\n\r\n    const [newPlayerName, setNewPlayerName] = useState(\"\");\r\n    let navigate = useNavigate();\r\n\r\n    const onGoClick = () => {\r\n        navigate(\"../game\", { replace: true });\r\n    }\r\n    const onChange = (e) => {\r\n        props.updatePlayers(e.target.playerId, e.target.checked);\r\n    }\r\n    const modesOnChange = (e) => {\r\n        props.setGameMode(e.target.value, e.target.checked);\r\n    }\r\n\r\n    const addCustomPlayer = () => {\r\n        props.addCustomPlayer(newPlayerName)\r\n    }\r\n\r\n    const onBanClick = () => {\r\n        navigate(\"../blacklist\", { replace: true });\r\n    }\r\n\r\n\r\n    const playersCheckboxes = props.players.map((player, index) => {\r\n        return (\r\n            <Col key={index} span={12}>\r\n                <Checkbox className=\"custom-checkbox\" playerId={player.id} checked={player.checked} value={player.value} onChange={onChange}>{player.label}</Checkbox>\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container container--qty\">\r\n            <div className={\"players-qty\"}>\r\n                <div className=\"players-qty__inner\">\r\n                    <Title>Игроки</Title>\r\n                        <Row gutter={[16, 16]} align={'middle'} justify={'center'}>\r\n                            {playersCheckboxes}\r\n                        </Row>\r\n                    <br />\r\n                    <div className={\"options-subtitle\"}>Режимы игры</div>\r\n                    <div className=\"modes-wrapper\">\r\n                        <Checkbox className=\"custom-checkbox\" checked={props.gameModes[0].isOn} value={props.gameModes[0].name} onChange={modesOnChange}>Двойные роли</Checkbox>\r\n                    </div>\r\n                    <div className={\"options-subtitle\"}>Добавить игроков</div>\r\n                    <div className={\"new-players-box\"}>\r\n                        <div className={\"field-group\"}>\r\n                            <Input placeholder=\"Имя\" value={newPlayerName} onChange={e => setNewPlayerName(e.target.value)}/>\r\n                            <Button onClick={addCustomPlayer}>Добавить</Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className={\"common-box\"}>\r\n                        <div className={\"options-subtitle\"}>Бан ролей</div>\r\n                        <Button type=\"primary\" size=\"large\" onClick={onBanClick}>Выбрать роли для бана</Button>\r\n                    </div>\r\n                    <Button type=\"primary\" size=\"large\" onClick={onGoClick}>GO</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameSettingsPage;","import {Button, Modal} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst TableModal = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOk = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    return (\r\n        <Modal title={props.modal.title} visible={props.modal.isVisible} onOk={handleOk} onCancel={handleCancel} footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n                OK\r\n            </Button>,\r\n        ]}>\r\n            <p>{props.modal.description}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TableModal;","import {Table} from \"antd\";\r\nimport {useEffect, useState} from \"react\";\r\nimport \"./RolesTable.css\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n\r\nconst RolesTable = (props) => {\r\n    const [tableData, setTableData] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOpenModal = (e) => {\r\n        dispatch({ type: 'openModal', roleId: e.target.dataset.id });\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: '',\r\n            dataIndex: 'color',\r\n            key: 'color',\r\n            className: 'ant-table-cell--color',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            backgroundColor: record.bgColor[0],\r\n                            background: `linear-gradient(135deg, ${record.bgColor[0]} 40%, ${record.bgColor[1]} 60%)`\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: '',\r\n            dataIndex: 'icon',\r\n            key: 'icon',\r\n            className: 'ant-table-cell--icon',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={\"roles-icons\"}>\r\n                            {record.icons.map(function (icon, index) {\r\n                                return (\r\n                                    <img key={index} className=\"role-icon\" alt=\"\" src={`${process.env.PUBLIC_URL}/img/${icon}`} />\r\n                                    )\r\n                            })}\r\n                        </div>\r\n                }\r\n            },\r\n        },\r\n        {\r\n            title: 'Игрок',\r\n            dataIndex: 'player',\r\n            key: 'player',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Роль',\r\n            dataIndex: 'roles',\r\n            key: 'roles',\r\n            render: (text, record) => {\r\n                return {\r\n                    children:\r\n                        <div className={'roles-list'}>\r\n                            {record.roles.map((role, index) => {\r\n                                return (\r\n                                    <>\r\n                                    <span key={index} className='roleLink' data-id={role.dataRole}\r\n                                          onClick={handleOpenModal}>{role.role}{record.roles.length > 1 && index === 0 ? ',': ''}</span>\r\n                                    <span> </span>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Количество карт',\r\n            dataIndex: 'cardNum',\r\n            key: 'cardNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Число для кубиков',\r\n            dataIndex: 'diesNums',\r\n            key: 'diesNums',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={'dies-num'}>\r\n                            {\r\n                                record.diesNums.map(function (num, index) {\r\n                                    return (\r\n                                        <span key={index}>{num}</span>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Возвращения',\r\n            dataIndex: 'resNum',\r\n            key: 'resNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            let data = [];\r\n            props.players.forEach((player) => {\r\n                let roleQty = 1;\r\n                if (props.gameModes[0].isOn) {\r\n                    roleQty = 2;\r\n                }\r\n                if (player.checked) {\r\n                    let randomRole;\r\n                    let firstRandomRole;\r\n                    let roles = [];\r\n                    let bgColors = [];\r\n                    let icons = [];\r\n                    let diesNums = [];\r\n                    const notBannedRoles = props.roles.filter(role => !role.isBanned)\r\n                    for (let i = 0; i < roleQty; i++) {\r\n                        randomRole = notBannedRoles[props.getRandomInt(0, notBannedRoles.length)];\r\n                        bgColors.push(randomRole.bgColor);\r\n                        icons.push(randomRole.icon)\r\n                        if (i === 0) {\r\n                            firstRandomRole = randomRole;\r\n                        }\r\n                        let role = {\r\n                            role: randomRole.name,\r\n                            dataRole: randomRole.id,\r\n                            color: randomRole.color,\r\n                        }\r\n                        roles.push(role);\r\n                    }\r\n                    for (let i = 0; i < 1; i++) {\r\n                        let diesNum = props.getRandomInt(2, 13);\r\n                        diesNums.push(diesNum);\r\n                    }\r\n                    const newDataEntity = {\r\n                        key: player.id,\r\n                        player: player.label,\r\n                        roles: roles,\r\n                        bgColor: bgColors,\r\n                        icons: icons,\r\n                        diesNums: diesNums,\r\n                        color: firstRandomRole.color,\r\n                        cardNum: (firstRandomRole.id === 0 || randomRole.id === 0) ? 9 : props.getRandomInt(5, 8),\r\n                        resNum: (firstRandomRole.id === 0 || randomRole.id === 0)  ? 0 : props.getRandomInt(1, 3),\r\n                    }\r\n\r\n                    data.push(newDataEntity);\r\n                }\r\n            })\r\n            setTableData(data)\r\n        }\r\n    }, [props, tableData.length])\r\n\r\n    return (\r\n        <Table pagination={false} columns={columns} dataSource={tableData}/>\r\n    )\r\n}\r\n\r\nexport default RolesTable;","import {Button, Col, Row} from \"antd\";\r\nimport TableModal from \"../TableModal/TableModal\";\r\nimport RolesTable from \"../RolesTable/RolesTable\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst RolesTableWrapper = (props) => {\r\n\r\n\r\n    const roles = useSelector((state) => state.roles)\r\n    const modal = useSelector((state) => state.modal)\r\n\r\n    const [firstMover, setFirstMover] = useState('...')\r\n\r\n    let navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (firstMover === '...') {\r\n            const chooseFirstMover = () => {\r\n                const checkedPlayers = props.players.filter((player) => {\r\n                    return(player.checked)\r\n                })\r\n                if (checkedPlayers.length > 0) {\r\n                    const randomPlayer = checkedPlayers[getRandomInt(0, checkedPlayers.length)];\r\n                    return (\r\n                        randomPlayer.label\r\n                    )\r\n                }\r\n                return \"никто. Недостаточно игроков\"\r\n            }\r\n            setFirstMover(chooseFirstMover());\r\n        }\r\n    }, [firstMover, props.players])\r\n\r\n\r\n    const getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    const newGameOnClick = () => {\r\n        navigate(\"../fool-picker\", { replace: true });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container container--main\">\r\n            <Row justify=\"center\">\r\n                <Col align=\"center\">\r\n                    <RolesTable roles={roles} players={props.players} getRandomInt={getRandomInt} gameModes={props.gameModes}/>\r\n                    <br />\r\n                    <div>Ходит { firstMover }</div>\r\n                    <br />\r\n                    <Button type=\"primary\" size=\"large\" onClick={newGameOnClick}>Новая партия</Button>\r\n                </Col>\r\n            </Row>\r\n                <TableModal modal={modal} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RolesTableWrapper;","import React from \"react\";\r\n\r\n\r\nconst BlackListItem = (props) => {\r\n\r\n    const onRoleClick = () => {\r\n        props.toggleRoleBan(props.role.id);\r\n    }\r\n\r\n    return (\r\n        <div className={`blacklist__item ${props.role.isBanned && \"blacklist__item--banned\"}`} onClick={onRoleClick}>\r\n            <div className={\"blacklist__item-icon\"}>\r\n                <img alt=\"\" src={`${process.env.PUBLIC_URL}/img/${props.role.icon}`} />\r\n            </div>\r\n            <div className={\"blacklist__item-name\"}>\r\n                {props.role.name}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlackListItem;","import {Button, Col, Row} from \"antd\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport \"./BlackList.css\";\r\nimport BlackListItem from \"../BlackListItem/BlackListItem\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst BlackList = (props) => {\r\n\r\n    const roles = useSelector((state) => state.roles);\r\n    const dispatch = useDispatch()\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const toggleRoleBan = id => {\r\n        dispatch({ type: 'setRoleBan', id});\r\n    };\r\n\r\n    const rolesMarkUp = roles.map((role, index) => {\r\n        return (\r\n            <BlackListItem key={index} role={role} toggleRoleBan={toggleRoleBan}/>\r\n        )\r\n    })\r\n\r\n    const onBanBtnClick = () => {\r\n        navigate(\"../fool-picker\", { replace: true });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container container--main\">\r\n            <Row justify=\"center\">\r\n                <Col align=\"center\">\r\n                    <h1>Забанить роли</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row justify=\"center\">\r\n                <Col align=\"center\">\r\n                    <div className={\"blacklist\"}>\r\n                        {rolesMarkUp}\r\n                    </div>\r\n                    <Button type=\"primary\" size=\"large\" onClick={onBanBtnClick}>Забанить роли</Button>\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default BlackList;","//TODO Добавить блэклист ролей\n\nimport './App.css';\nimport GameSettingsPage from \"./GameSettingsPage/GameSettingsPage\";\nimport RolesTableWrapper from \"./RolesTableWrapper/RolesTableWrapper\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    BrowserRouter as Router,\n    Route, Routes\n} from \"react-router-dom\";\nimport BlackList from \"./BlackList/BlackList\";\n\n\nfunction App() {\n    const players = useSelector((state) => state.players)\n    const gameModes = useSelector((state) => state.gameModes)\n    const dispatch = useDispatch()\n\n    const updatePlayers = (id, checked) => {\n        dispatch({\n            type: 'updatePlayers',\n            id,\n            checked\n        })\n    }\n\n    const setPlayersSelectorVisible = (value) => {\n        dispatch({\n            type: 'setPlayersSelectorVisible',\n            value\n        })\n    }\n\n    const setGameMode = (gameMode, value) => {\n        dispatch({\n            type: 'setGameMode',\n            gameMode,\n            value\n        })\n    }\n\n    const addCustomPlayer = (name) => {\n        dispatch({\n            type: 'addCustomPlayer',\n            name\n        })\n    }\n    return (\n        <Router>\n            <Routes>\n                {['/', '/fool-picker']\n                    .map((path,index) => {\n                        return <Route key={index} path={path} element={\n                            <GameSettingsPage setPlayersSelectorVisible={setPlayersSelectorVisible}\n                                              players={players}\n                                              updatePlayers={updatePlayers}\n                                              gameModes={gameModes}\n                                              setGameMode={setGameMode}\n                                              addCustomPlayer={addCustomPlayer}/>\n                        }/>\n                    })\n                }\n                <Route path=\"/blacklist\" element={<BlackList />} />\n                <Route path=\"/game\" element={<RolesTableWrapper setPlayersSelectorVisible={setPlayersSelectorVisible} players={players} gameModes={gameModes}/>} />\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;\n","import {createStore} from \"redux\";\r\n\r\nlet initialState = {\r\n    players: [\r\n        {id: 0, label: 'Денис', value: 'Денис', checked: true},\r\n        {id: 1, label: 'Сергей 1', value: 'Сергей 1', checked: true},\r\n        {id: 2, label: 'Анна', value: 'Анна', checked: true},\r\n        {id: 3, label: 'Сергей 2', value: 'Сергей 2', checked: true}\r\n    ],\r\n\r\n    playersSelector: {\r\n        isVisible: true\r\n    },\r\n\r\n    modal: {\r\n        isVisible: false,\r\n        title: '...',\r\n        description: '...'\r\n    },\r\n\r\n    gameModes: [\r\n        {\r\n            id: 0, name: 'doubleRoles', isOn: false,\r\n        },\r\n    ],\r\n\r\n    roles: [\r\n        {\r\n            id: 0,\r\n            name: 'Варвар',\r\n            color: '#000',\r\n            bgColor: '#afafaf',\r\n            roleRules: 'Отбивается 1 раз за игру, нельзя вернуть в игру',\r\n            icon: 'barbarian.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 1,\r\n            name: 'Крестоносец',\r\n            color: '#000',\r\n            bgColor: '#51885d',\r\n            roleRules: 'Может отбить одной картой две',\r\n            icon: 'crusader.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Некромант',\r\n            color: '#fff',\r\n            bgColor: '#212121',\r\n            roleRules: 'Воскрешает половину от кол-ва своих карт в колоду противника 3 раза за игру',\r\n            icon: 'necromancer.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ядовитый',\r\n            color: '#000',\r\n            bgColor: '#00ff1f',\r\n            roleRules: 'Делает укол с ядом 2 раза за игру',\r\n            icon: 'poisonous.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Берсерк',\r\n            color: '#000',\r\n            bgColor: '#ff5151',\r\n            roleRules: 'Может подкидывать +- 1 карту по номиналу',\r\n            icon: 'berserk.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Разбойник',\r\n            color: '#000',\r\n            bgColor: '#f8ff8d',\r\n            roleRules: 'Два козыря',\r\n            icon: 'rogue.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Отражатель',\r\n            color: '#000',\r\n            bgColor: '#ce8e00',\r\n            roleRules: 'Отражает карту 2 раза за игру',\r\n            icon: 'deflector.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Реверсивный',\r\n            color: '#000',\r\n            bgColor: '#b912ff',\r\n            roleRules: 'Бьет большие карты меньшими',\r\n            icon: 'reverse.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Рыцарь',\r\n            color: '#fff',\r\n            bgColor: '#000f72',\r\n            roleRules: 'Подкидывает кому угодно, а ему может подкинуть только игрок справа',\r\n            icon: 'knight.svg',\r\n            isBanned: false\r\n        },\r\n        {\r\n            id: 9,\r\n            name: 'Вор',\r\n            color: '#fff',\r\n            bgColor: '#555',\r\n            roleRules: '2 раза за игру смотрит 3 любые карты оппонента и ворует любую одну из них',\r\n            icon: 'thief.svg',\r\n            isBanned: false\r\n        }\r\n    ],\r\n}\r\n\r\nlet appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'addCustomPlayer':\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players,\r\n                    {id: state.players.length, label: action.name, value: action.name, checked: true}\r\n                ]\r\n            }\r\n        case 'setGameMode':\r\n            return {\r\n                ...state,\r\n                gameModes: [\r\n                    ...state.gameModes.map((mode) => {\r\n                        if (mode.name === action.gameMode) {\r\n                            mode.isOn = action.value\r\n                        }\r\n                        return {...mode}\r\n                    })\r\n                ]\r\n            }\r\n        case 'updatePlayers':\r\n\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players.map((player, index) => {\r\n                        if (index === action.id) {\r\n                            player.checked = action.checked\r\n                        }\r\n                        return {...player}\r\n                    })\r\n                ],\r\n            }\r\n        case 'openModal':\r\n            let clickedRole = initialState.roles[action.roleId]\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isVisible: true,\r\n                    title: clickedRole.name,\r\n                    description: clickedRole.roleRules\r\n                }\r\n            };\r\n        case 'closeModal':\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isModalVisible: false,\r\n                }\r\n            };\r\n        case 'setRoleBan':\r\n\r\n            return {\r\n                ...state,\r\n                roles: [\r\n                    ...state.roles.map((role) => {\r\n                        if (role.id === action.id) {\r\n                            role.isBanned = !role.isBanned\r\n                        }\r\n                        return {...role}\r\n                    })\r\n                ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet store = createStore(appReducer);\r\ndocument.state = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}