{"version":3,"sources":["PlayersQty/PlayersQty.jsx","TableModal/TableModal.jsx","RolesTable/RolesTable.jsx","RolesTableWrapper/RolesTableWrapper.jsx","App.js","store/store.js","index.js"],"names":["PlayersQty","props","useState","newPlayerName","setNewPlayerName","onChange","e","updatePlayers","target","playerId","checked","playersCheckboxes","players","map","player","index","span","className","id","value","label","Title","gutter","align","justify","gameModes","isOn","name","setGameMode","placeholder","onClick","addCustomPlayer","type","size","setPlayersSelectorVisible","TableModal","dispatch","useDispatch","handleOk","title","modal","visible","isVisible","onOk","onCancel","footer","description","RolesTable","tableData","setTableData","handleOpenModal","roleId","dataset","columns","dataIndex","key","render","text","record","style","backgroundColor","bgColor","background","children","icons","icon","alt","src","process","roles","role","dataRole","length","diesNums","num","useEffect","data","forEach","roleQty","randomRole","firstRandomRole","bgColors","i","getRandomInt","push","color","diesNum","newDataEntity","cardNum","resNum","pagination","dataSource","RolesTableWrapper","useSelector","state","firstMover","setFirstMover","checkedPlayers","filter","chooseFirstMover","min","max","Math","ceil","floor","random","App","isPlayersSelectorVisible","playersSelector","gameMode","initialState","roleRules","store","createStore","action","mode","clickedRole","isModalVisible","document","getState","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.943e43ab.chunk.js","sourcesContent":["import {Button, Checkbox, Row, Col, Input} from \"antd\";\r\nimport './PlayersQty.css'\r\nimport Title from \"antd/es/typography/Title\";\r\nimport {useState} from \"react\";\r\n\r\nconst PlayersQty = (props) => {\r\n\r\n    const [newPlayerName, setNewPlayerName] = useState(\"\");\r\n\r\n    const btnOnClick = () => {\r\n        props.setPlayersSelectorVisible(false);\r\n    }\r\n    const onChange = (e) => {\r\n        props.updatePlayers(e.target.playerId, e.target.checked);\r\n    }\r\n    const modesOnChange = (e) => {\r\n        props.setGameMode(e.target.value, e.target.checked);\r\n    }\r\n\r\n    const addCustomPlayer = () => {\r\n        props.addCustomPlayer(newPlayerName)\r\n    }\r\n\r\n    const changeName = (e) => {\r\n        setNewPlayerName(e.target.value)\r\n    }\r\n\r\n    const playersCheckboxes = props.players.map((player, index) => {\r\n        return (\r\n            <Col key={index} span={12}>\r\n                <Checkbox className=\"custom-checkbox\" playerId={player.id} checked={player.checked} value={player.value} onChange={onChange}>{player.label}</Checkbox>\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container container--qty\">\r\n            <div className={\"players-qty\"}>\r\n                <div className=\"players-qty__inner\">\r\n                    <Title>Игроки</Title>\r\n                        <Row gutter={[16, 16]} align={'middle'} justify={'center'}>\r\n                            {playersCheckboxes}\r\n                        </Row>\r\n                    <br />\r\n                    <div className={\"options-subtitle\"}>Режимы игры</div>\r\n                    <div className=\"modes-wrapper\">\r\n                        <Checkbox className=\"custom-checkbox\" checked={props.gameModes[0].isOn} value={props.gameModes[0].name} onChange={modesOnChange}>Двойные роли</Checkbox>\r\n                    </div>\r\n                    <div className={\"options-subtitle\"}>Добавить игроков</div>\r\n                    <div className={\"new-players-box\"}>\r\n                        <div className={\"field-group\"}>\r\n                            <Input placeholder=\"Имя\" value={newPlayerName} onChange={e => setNewPlayerName(e.target.value)}/>\r\n                            <Button onClick={addCustomPlayer}>Добавить</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Button type=\"primary\" size=\"large\" onClick={btnOnClick}>GO</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayersQty;","import {Button, Modal} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst TableModal = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOk = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    return (\r\n        <Modal title={props.modal.title} visible={props.modal.isVisible} onOk={handleOk} onCancel={handleCancel} footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n                OK\r\n            </Button>,\r\n        ]}>\r\n            <p>{props.modal.description}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TableModal;","import {Table} from \"antd\";\r\nimport {useEffect, useState} from \"react\";\r\nimport \"./RolesTable.css\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n\r\nconst RolesTable = (props) => {\r\n    const [tableData, setTableData] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOpenModal = (e) => {\r\n        dispatch({ type: 'openModal', roleId: e.target.dataset.id });\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: '',\r\n            dataIndex: 'color',\r\n            key: 'color',\r\n            className: 'ant-table-cell--color',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            backgroundColor: record.bgColor[0],\r\n                            background: `linear-gradient(135deg, ${record.bgColor[0]} 40%, ${record.bgColor[1]} 60%)`\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: '',\r\n            dataIndex: 'icon',\r\n            key: 'icon',\r\n            className: 'ant-table-cell--icon',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={\"roles-icons\"}>\r\n                            {record.icons.map(function (icon, index) {\r\n                                return (\r\n                                    <img key={index} className=\"role-icon\" alt=\"\" src={`${process.env.PUBLIC_URL}/img/${icon}`} />\r\n                                    )\r\n                            })}\r\n                        </div>\r\n                }\r\n            },\r\n        },\r\n        {\r\n            title: 'Игрок',\r\n            dataIndex: 'player',\r\n            key: 'player',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Роль',\r\n            dataIndex: 'roles',\r\n            key: 'roles',\r\n            render: (text, record) => {\r\n                return {\r\n                    children:\r\n                        <div className={'roles-list'}>\r\n                            {record.roles.map((role, index) => {\r\n                                return (\r\n                                    <>\r\n                                    <span key={index} className='roleLink' data-id={role.dataRole}\r\n                                          onClick={handleOpenModal}>{role.role}{record.roles.length > 1 && index === 0 ? ',': ''}</span>\r\n                                    <span> </span>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Количество карт',\r\n            dataIndex: 'cardNum',\r\n            key: 'cardNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Число для кубиков',\r\n            dataIndex: 'diesNums',\r\n            key: 'diesNums',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={'dies-num'}>\r\n                            {\r\n                                record.diesNums.map(function (num, index) {\r\n                                    return (\r\n                                        <span key={index}>{num}</span>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Возвращения',\r\n            dataIndex: 'resNum',\r\n            key: 'resNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            let data = [];\r\n            props.players.forEach((player) => {\r\n                let roleQty = 1;\r\n                if (props.gameModes[0].isOn) {\r\n                    roleQty = 2;\r\n                }\r\n                if (player.checked) {\r\n                    let randomRole;\r\n                    let firstRandomRole;\r\n                    let roles = [];\r\n                    let bgColors = [];\r\n                    let icons = [];\r\n                    let diesNums = [];\r\n                    for (let i = 0; i < roleQty; i++) {\r\n                        randomRole = props.roles[props.getRandomInt(0, props.roles.length)];\r\n                        bgColors.push(randomRole.bgColor);\r\n                        icons.push(randomRole.icon)\r\n                        if (i === 0) {\r\n                            firstRandomRole = randomRole;\r\n                        }\r\n                        let role = {\r\n                            role: randomRole.name,\r\n                            dataRole: randomRole.id,\r\n                            color: randomRole.color,\r\n                        }\r\n                        roles.push(role);\r\n                    }\r\n                    for (let i = 0; i < 1; i++) {\r\n                        let diesNum = props.getRandomInt(1, 13);\r\n                        diesNums.push(diesNum);\r\n                    }\r\n                    const newDataEntity = {\r\n                        key: player.id,\r\n                        player: player.label,\r\n                        roles: roles,\r\n                        bgColor: bgColors,\r\n                        icons: icons,\r\n                        diesNums: diesNums,\r\n                        color: firstRandomRole.color,\r\n                        cardNum: (firstRandomRole.id === 0 || randomRole.id === 0) ? 9 : props.getRandomInt(5, 8),\r\n                        resNum: (firstRandomRole.id === 0 || randomRole.id === 0)  ? 0 : props.getRandomInt(1, 3),\r\n                    }\r\n\r\n                    data.push(newDataEntity);\r\n                }\r\n            })\r\n            setTableData(data)\r\n        }\r\n    }, [props, tableData.length])\r\n\r\n    return (\r\n        <Table pagination={false} columns={columns} dataSource={tableData}/>\r\n    )\r\n}\r\n\r\nexport default RolesTable;","import {Button, Col, Row} from \"antd\";\r\nimport TableModal from \"../TableModal/TableModal\";\r\nimport RolesTable from \"../RolesTable/RolesTable\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\n\r\nconst RolesTableWrapper = (props) => {\r\n\r\n\r\n    const roles = useSelector((state) => state.roles)\r\n    const modal = useSelector((state) => state.modal)\r\n\r\n    const [firstMover, setFirstMover] = useState('...')\r\n\r\n    useEffect(() => {\r\n        if (firstMover === '...') {\r\n            const chooseFirstMover = () => {\r\n                const checkedPlayers = props.players.filter((player) => {\r\n                    return(player.checked)\r\n                })\r\n                if (checkedPlayers.length > 0) {\r\n                    const randomPlayer = checkedPlayers[getRandomInt(0, checkedPlayers.length)];\r\n                    return (\r\n                        randomPlayer.label\r\n                    )\r\n                }\r\n                return \"никто. Недостаточно игроков\"\r\n            }\r\n            setFirstMover(chooseFirstMover());\r\n        }\r\n    }, [firstMover, props.players])\r\n\r\n\r\n    const getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    const btnOnClick = () => {\r\n        props.setPlayersSelectorVisible(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container container--main\">\r\n            <Row justify=\"center\">\r\n                <Col align=\"center\">\r\n                    <RolesTable roles={roles} players={props.players} getRandomInt={getRandomInt} gameModes={props.gameModes}/>\r\n                    <br />\r\n                    <div>Ходит { firstMover }</div>\r\n                    <br />\r\n                    <Button type=\"primary\" size=\"large\" onClick={btnOnClick}>Новая партия</Button>\r\n                </Col>\r\n            </Row>\r\n                <TableModal modal={modal} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RolesTableWrapper;","//TODO Добавить добавление кастомного игрока\n//TODO Добавить блэклист ролей\n\nimport './App.css';\nimport PlayersQty from \"./PlayersQty/PlayersQty\";\nimport RolesTableWrapper from \"./RolesTableWrapper/RolesTableWrapper\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nfunction App() {\n    const isPlayersSelectorVisible = useSelector((state) => state.playersSelector.isVisible)\n    const players = useSelector((state) => state.players)\n    const gameModes = useSelector((state) => state.gameModes)\n    const dispatch = useDispatch()\n\n    const updatePlayers = (id, checked) => {\n        dispatch({\n            type: 'updatePlayers',\n            id,\n            checked\n        })\n    }\n\n    const setPlayersSelectorVisible = (value) => {\n        dispatch({\n            type: 'setPlayersSelectorVisible',\n            value\n        })\n    }\n\n    const setGameMode = (gameMode, value) => {\n        dispatch({\n            type: 'setGameMode',\n            gameMode,\n            value\n        })\n    }\n\n    const addCustomPlayer = (name) => {\n        dispatch({\n            type: 'addCustomPlayer',\n            name\n        })\n    }\n    return (\n        <main>\n            {isPlayersSelectorVisible ?\n                <PlayersQty setPlayersSelectorVisible={setPlayersSelectorVisible} players={players}\n                            updatePlayers={updatePlayers} gameModes={gameModes} setGameMode={setGameMode} addCustomPlayer={addCustomPlayer}/> :\n                <RolesTableWrapper setPlayersSelectorVisible={setPlayersSelectorVisible} players={players} gameModes={gameModes}/>\n            }\n        </main>\n    );\n}\n\nexport default App;\n","import {createStore} from \"redux\";\r\n\r\nlet initialState = {\r\n    players: [\r\n        {id: 0, label: 'Денис', value: 'Денис', checked: true},\r\n        {id: 1, label: 'Сергей 1', value: 'Сергей 1', checked: true},\r\n        {id: 2, label: 'Анна', value: 'Анна', checked: true},\r\n        {id: 3, label: 'Сергей 2', value: 'Сергей 2', checked: true}\r\n    ],\r\n\r\n    playersSelector: {\r\n        isVisible: true\r\n    },\r\n\r\n    modal: {\r\n        isVisible: false,\r\n        title: '...',\r\n        description: '...'\r\n    },\r\n\r\n    gameModes: [\r\n        {\r\n            id: 0, name: 'doubleRoles', isOn: false,\r\n        },\r\n    ],\r\n\r\n    roles: [\r\n        {\r\n            id: 0,\r\n            name: 'Варвар',\r\n            color: '#000',\r\n            bgColor: '#afafaf',\r\n            roleRules: 'Отбивается 1 раз за игру, нельзя вернуть в игру',\r\n            icon: 'barbarian.svg',\r\n        },\r\n        {\r\n            id: 1,\r\n            name: 'Крестоносец',\r\n            color: '#000',\r\n            bgColor: '#51885d',\r\n            roleRules: 'Может отбить одной картой две',\r\n            icon: 'crusader.svg',\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Некромант',\r\n            color: '#fff',\r\n            bgColor: '#212121',\r\n            roleRules: 'Воскрешает половину от кол-ва своих карт в колоду противника 3 раза за игру',\r\n            icon: 'necromancer.svg',\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ядовитый',\r\n            color: '#000',\r\n            bgColor: '#00ff1f',\r\n            roleRules: 'Делает укол с ядом 2 раза за игру',\r\n            icon: 'poisonous.svg',\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Берсерк',\r\n            color: '#000',\r\n            bgColor: '#ff5151',\r\n            roleRules: 'Может подкидывать +- 1 карту по номиналу',\r\n            icon: 'berserk.svg',\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Разбойник',\r\n            color: '#000',\r\n            bgColor: '#f8ff8d',\r\n            roleRules: 'Два козыря',\r\n            icon: 'rogue.svg',\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Отражатель',\r\n            color: '#000',\r\n            bgColor: '#ce8e00',\r\n            roleRules: 'Отражает карту 2 раза за игру',\r\n            icon: 'deflector.svg',\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Реверсивный',\r\n            color: '#000',\r\n            bgColor: '#b912ff',\r\n            roleRules: 'Бьет большие карты меньшими',\r\n            icon: 'reverse.svg',\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Рыцарь',\r\n            color: '#fff',\r\n            bgColor: '#000f72',\r\n            roleRules: 'Подкидывает кому угодно, а ему может подкинуть только игрок справа',\r\n            icon: 'knight.svg',\r\n        },\r\n        {\r\n            id: 9,\r\n            name: 'Вор',\r\n            color: '#fff',\r\n            bgColor: '#555',\r\n            roleRules: '2 раза за игру смотрит карты оппонента и ворует любую одну из них',\r\n            icon: 'thief.svg',\r\n        }\r\n    ],\r\n}\r\n\r\nlet appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'addCustomPlayer':\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players,\r\n                    {id: state.players.length, label: action.name, value: action.name, checked: true}\r\n                ]\r\n            }\r\n        case 'setGameMode':\r\n            return {\r\n                ...state,\r\n                gameModes: [\r\n                    ...state.gameModes.map((mode) => {\r\n                        if (mode.name === action.gameMode) {\r\n                            mode.isOn = action.value\r\n                        }\r\n                        return {...mode}\r\n                    })\r\n                ]\r\n            }\r\n        case 'updatePlayers':\r\n\r\n            return {\r\n                ...state,\r\n                players: [\r\n                    ...state.players.map((player, index) => {\r\n                        if (index === action.id) {\r\n                            player.checked = action.checked\r\n                        }\r\n                        return {...player}\r\n                    })\r\n                ],\r\n            }\r\n        case 'setPlayersSelectorVisible':\r\n            return {\r\n                ...state,\r\n                playersSelector: {\r\n                    isVisible: action.value\r\n                }\r\n            }\r\n        case 'openModal':\r\n            let clickedRole = initialState.roles[action.roleId]\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isVisible: true,\r\n                    title: clickedRole.name,\r\n                    description: clickedRole.roleRules\r\n                }\r\n            };\r\n        case 'closeModal':\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    isModalVisible: false,\r\n                }\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet store = createStore(appReducer);\r\ndocument.state = store.getState();\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}