{"version":3,"sources":["TableModal/TableModal.jsx","RolesTable/RolesTable.jsx","RolesTableWrapper/RolesTableWrapper.jsx"],"names":["TableModal","props","dispatch","useDispatch","handleOk","type","title","modal","visible","isVisible","onOk","onCancel","footer","onClick","description","RolesTable","useState","tableData","setTableData","handleOpenModal","e","roleId","target","dataset","id","columns","dataIndex","key","className","render","text","record","style","backgroundColor","bgColor","background","children","icons","map","icon","index","alt","src","process","roles","role","dataRole","length","diesNums","num","useEffect","data","players","forEach","player","roleQty","gameModes","isOn","checked","randomRole","firstRandomRole","bgColors","notBannedRoles","filter","isBanned","i","getRandomInt","push","name","color","diesNum","newDataEntity","label","cardNum","resNum","pagination","dataSource","RolesTableWrapper","useSelector","state","firstMover","setFirstMover","navigate","useNavigate","checkedPlayers","chooseFirstMover","min","max","Math","ceil","floor","random","justify","align","size","replace"],"mappings":"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","file":"static/js/5.83b9e62e.chunk.js","sourcesContent":["import {Button, Modal} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst TableModal = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOk = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        dispatch({ type: 'closeModal' });\r\n    };\r\n\r\n    return (\r\n        <Modal title={props.modal.title} visible={props.modal.isVisible} onOk={handleOk} onCancel={handleCancel} footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n                OK\r\n            </Button>,\r\n        ]}>\r\n            <p>{props.modal.description}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TableModal;","import {Table} from \"antd\";\r\nimport {useEffect, useState} from \"react\";\r\nimport \"./RolesTable.css\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n\r\nconst RolesTable = (props) => {\r\n    const [tableData, setTableData] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOpenModal = (e) => {\r\n        dispatch({ type: 'openModal', roleId: e.target.dataset.id });\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: '',\r\n            dataIndex: 'color',\r\n            key: 'color',\r\n            className: 'ant-table-cell--color',\r\n            render(text, record) {\r\n                return {\r\n                    props: {\r\n                        style: {\r\n                            backgroundColor: record.bgColor[0],\r\n                            background: `linear-gradient(135deg, ${record.bgColor[0]} 40%, ${record.bgColor[1]} 60%)`\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: '',\r\n            dataIndex: 'icon',\r\n            key: 'icon',\r\n            className: 'ant-table-cell--icon',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={\"roles-icons\"}>\r\n                            {record.icons.map(function (icon, index) {\r\n                                return (\r\n                                    <img key={index} className=\"role-icon\" alt=\"\" src={`${process.env.PUBLIC_URL}/img/${icon}`} />\r\n                                    )\r\n                            })}\r\n                        </div>\r\n                }\r\n            },\r\n        },\r\n        {\r\n            title: 'Игрок',\r\n            dataIndex: 'player',\r\n            key: 'player',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Роль',\r\n            dataIndex: 'roles',\r\n            key: 'roles',\r\n            render: (text, record) => {\r\n                return {\r\n                    children:\r\n                        <div className={'roles-list'}>\r\n                            {record.roles.map((role, index) => {\r\n                                return (\r\n                                    <>\r\n                                    <span key={index} className='roleLink' data-id={role.dataRole}\r\n                                          onClick={handleOpenModal}>{role.role}{record.roles.length > 1 && index === 0 ? ',': ''}</span>\r\n                                    <span> </span>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Количество карт',\r\n            dataIndex: 'cardNum',\r\n            key: 'cardNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n        {\r\n            title: 'Число для кубиков',\r\n            dataIndex: 'diesNums',\r\n            key: 'diesNums',\r\n            render(text, record) {\r\n                return {\r\n                    children:\r\n                        <div className={'dies-num'}>\r\n                            {\r\n                                record.diesNums.map(function (num, index) {\r\n                                    return (\r\n                                        <span key={index}>{num}</span>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: 'Возвращения',\r\n            dataIndex: 'resNum',\r\n            key: 'resNum',\r\n            render(text, record) {\r\n                return {\r\n                    children: <div>{text}</div>,\r\n                };\r\n            },\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            let data = [];\r\n            props.players.forEach((player) => {\r\n                let roleQty = 1;\r\n                if (props.gameModes[0].isOn) {\r\n                    roleQty = 2;\r\n                }\r\n                if (player.checked) {\r\n                    let randomRole;\r\n                    let firstRandomRole;\r\n                    let roles = [];\r\n                    let bgColors = [];\r\n                    let icons = [];\r\n                    let diesNums = [];\r\n                    const notBannedRoles = props.roles.filter(role => !role.isBanned)\r\n                    for (let i = 0; i < roleQty; i++) {\r\n                        randomRole = notBannedRoles[props.getRandomInt(0, notBannedRoles.length)];\r\n                        bgColors.push(randomRole.bgColor);\r\n                        icons.push(randomRole.icon)\r\n                        if (i === 0) {\r\n                            firstRandomRole = randomRole;\r\n                        }\r\n                        let role = {\r\n                            role: randomRole.name,\r\n                            dataRole: randomRole.id,\r\n                            color: randomRole.color,\r\n                        }\r\n                        roles.push(role);\r\n                    }\r\n                    for (let i = 0; i < 1; i++) {\r\n                        let diesNum = props.getRandomInt(2, 13);\r\n                        diesNums.push(diesNum);\r\n                    }\r\n                    const newDataEntity = {\r\n                        key: player.id,\r\n                        player: player.label,\r\n                        roles: roles,\r\n                        bgColor: bgColors,\r\n                        icons: icons,\r\n                        diesNums: diesNums,\r\n                        color: firstRandomRole.color,\r\n                        cardNum: (firstRandomRole.id === 0 || randomRole.id === 0) ? 9 : props.getRandomInt(5, 8),\r\n                        resNum: (firstRandomRole.id === 0 || randomRole.id === 0)  ? 0 : props.getRandomInt(1, 3),\r\n                    }\r\n\r\n                    data.push(newDataEntity);\r\n                }\r\n            })\r\n            setTableData(data)\r\n        }\r\n    }, [props, tableData.length])\r\n\r\n    return (\r\n        <Table pagination={false} columns={columns} dataSource={tableData}/>\r\n    )\r\n}\r\n\r\nexport default RolesTable;","import {Button, Col, Row} from \"antd\";\r\nimport TableModal from \"../TableModal/TableModal\";\r\nimport RolesTable from \"../RolesTable/RolesTable\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst RolesTableWrapper = (props) => {\r\n\r\n\r\n    const roles = useSelector((state) => state.roles)\r\n    const modal = useSelector((state) => state.modal)\r\n\r\n    const [firstMover, setFirstMover] = useState('...')\r\n\r\n    let navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (firstMover === '...') {\r\n            const chooseFirstMover = () => {\r\n                const checkedPlayers = props.players.filter((player) => {\r\n                    return(player.checked)\r\n                })\r\n                if (checkedPlayers.length > 0) {\r\n                    const randomPlayer = checkedPlayers[getRandomInt(0, checkedPlayers.length)];\r\n                    return (\r\n                        randomPlayer.label\r\n                    )\r\n                }\r\n                return \"никто. Недостаточно игроков\"\r\n            }\r\n            setFirstMover(chooseFirstMover());\r\n        }\r\n    }, [firstMover, props.players])\r\n\r\n\r\n    const getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    const newGameOnClick = () => {\r\n        navigate(\"../fool-picker\", { replace: true });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container container--main\">\r\n            <Row justify=\"center\">\r\n                <Col align=\"center\">\r\n                    <RolesTable roles={roles} players={props.players} getRandomInt={getRandomInt} gameModes={props.gameModes}/>\r\n                    <br />\r\n                    <div>Ходит { firstMover }</div>\r\n                    <br />\r\n                    <Button type=\"primary\" size=\"large\" onClick={newGameOnClick}>Новая партия</Button>\r\n                </Col>\r\n            </Row>\r\n                <TableModal modal={modal} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RolesTableWrapper;"],"sourceRoot":""}